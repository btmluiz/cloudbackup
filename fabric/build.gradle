plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    shadowCommon 'com.google.auth:google-auth-library-oauth2-http:1.11.0'
    shadowCommon 'com.google.api-client:google-api-client:2.0.0'
    shadowCommon 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    shadowCommon 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
    shadowCommon 'com.dropbox.core:dropbox-core-sdk:5.4.4'
    shadowCommon 'org.yaml:snakeyaml:2.0'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

tasks.register('renameJarForPublication', Zip) {
    dependsOn remapJar
    from remapJar.archiveFile.map { zipTree(it) }
    extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    classifier project.name
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
unifiedPublishing {
    project {
        displayName = "[Fabric $rootProject.supported_version] v$project.version"
        releaseType = "${rootProject.artifact_type}"
        gameVersions = ["${rootProject.supported_version}"]
        gameLoaders = ["fabric"]
        mainPublication renameJarForPublication

        var CF_API_KEY = project.findProperty("CF_API_KEY") ?: System.getenv("CF_API_KEY")
        if (CF_API_KEY != null) {
            curseforge {
                token = CF_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll("Java 16")
            }
        }
    }
}